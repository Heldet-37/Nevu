const sequelize = require('./src/config/database');

async function migrateMensagens() {
  try {
    console.log('üîÑ Iniciando migra√ß√£o de mensagens...');
    
    // Verificar se as tabelas j√° existem
    const tableInfo = await sequelize.query(
      "PRAGMA table_info(mensagens)",
      { type: sequelize.QueryTypes.SELECT }
    );
    
    if (tableInfo.length === 0) {
      console.log('üìù Criando tabela mensagens...');
      await sequelize.query(`
        CREATE TABLE mensagens (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          remetenteId INTEGER NOT NULL,
          destinatarioId INTEGER NOT NULL,
          texto TEXT NOT NULL,
          tipo TEXT DEFAULT 'texto',
          arquivo TEXT,
          lida BOOLEAN DEFAULT 0,
          enviada BOOLEAN DEFAULT 1,
          entregue BOOLEAN DEFAULT 0,
          vagaId INTEGER,
          conversaId TEXT NOT NULL,
          createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
          updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (remetenteId) REFERENCES usuarios (id),
          FOREIGN KEY (destinatarioId) REFERENCES usuarios (id),
          FOREIGN KEY (vagaId) REFERENCES vagas (id)
        )
      `);
      console.log('‚úÖ Tabela mensagens criada!');
    } else {
      console.log('‚ÑπÔ∏è Tabela mensagens j√° existe');
    }

    // Verificar se a tabela conversas existe
    const conversaTableInfo = await sequelize.query(
      "PRAGMA table_info(conversas)",
      { type: sequelize.QueryTypes.SELECT }
    );
    
    if (conversaTableInfo.length === 0) {
      console.log('üìù Criando tabela conversas...');
      await sequelize.query(`
        CREATE TABLE conversas (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          conversaId TEXT UNIQUE NOT NULL,
          usuario1Id INTEGER NOT NULL,
          usuario2Id INTEGER NOT NULL,
          vagaId INTEGER,
          ultimaMensagem TEXT,
          ultimaMensagemData DATETIME,
          mensagensNaoLidas1 INTEGER DEFAULT 0,
          mensagensNaoLidas2 INTEGER DEFAULT 0,
          ativa BOOLEAN DEFAULT 1,
          silenciada1 BOOLEAN DEFAULT 0,
          silenciada2 BOOLEAN DEFAULT 0,
          bloqueada1 BOOLEAN DEFAULT 0,
          bloqueada2 BOOLEAN DEFAULT 0,
          createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
          updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (usuario1Id) REFERENCES usuarios (id),
          FOREIGN KEY (usuario2Id) REFERENCES usuarios (id),
          FOREIGN KEY (vagaId) REFERENCES vagas (id)
        )
      `);
      console.log('‚úÖ Tabela conversas criada!');
    } else {
      console.log('‚ÑπÔ∏è Tabela conversas j√° existe');
    }

    // Criar √≠ndices para melhor performance
    console.log('üìù Criando √≠ndices...');
    
    try {
      await sequelize.query('CREATE INDEX idx_mensagens_conversaId ON mensagens(conversaId)');
      console.log('‚úÖ √çndice idx_mensagens_conversaId criado');
    } catch (e) {
      console.log('‚ÑπÔ∏è √çndice idx_mensagens_conversaId j√° existe');
    }

    try {
      await sequelize.query('CREATE INDEX idx_mensagens_remetenteId ON mensagens(remetenteId)');
      console.log('‚úÖ √çndice idx_mensagens_remetenteId criado');
    } catch (e) {
      console.log('‚ÑπÔ∏è √çndice idx_mensagens_remetenteId j√° existe');
    }

    try {
      await sequelize.query('CREATE INDEX idx_mensagens_destinatarioId ON mensagens(destinatarioId)');
      console.log('‚úÖ √çndice idx_mensagens_destinatarioId criado');
    } catch (e) {
      console.log('‚ÑπÔ∏è √çndice idx_mensagens_destinatarioId j√° existe');
    }

    try {
      await sequelize.query('CREATE INDEX idx_conversas_usuario1Id ON conversas(usuario1Id)');
      console.log('‚úÖ √çndice idx_conversas_usuario1Id criado');
    } catch (e) {
      console.log('‚ÑπÔ∏è √çndice idx_conversas_usuario1Id j√° existe');
    }

    try {
      await sequelize.query('CREATE INDEX idx_conversas_usuario2Id ON conversas(usuario2Id)');
      console.log('‚úÖ √çndice idx_conversas_usuario2Id criado');
    } catch (e) {
      console.log('‚ÑπÔ∏è √çndice idx_conversas_usuario2Id j√° existe');
    }

    console.log('\n‚úÖ Migra√ß√£o de mensagens conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await sequelize.close();
  }
}

// Executar migra√ß√£o
migrateMensagens(); 