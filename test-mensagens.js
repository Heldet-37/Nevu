const axios = require('axios');

// Configura√ß√£o da API
const API_BASE = 'http://localhost:3001/api';

// Fun√ß√£o para fazer login e obter token
async function login(email, senha) {
  try {
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email,
      senha
    });
    return response.data.token;
  } catch (error) {
    console.error('Erro no login:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar listar conversas
async function testarListarConversas(token) {
  try {
    console.log('üîç Testando: Listar conversas');
    const response = await axios.get(`${API_BASE}/mensagens/conversas`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Conversas encontradas:', response.data.length);
    console.log('üìã Dados:', JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao listar conversas:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar buscar usu√°rios
async function testarBuscarUsuarios(token, busca = '') {
  try {
    console.log('üîç Testando: Buscar usu√°rios');
    const response = await axios.get(`${API_BASE}/mensagens/usuarios?busca=${busca}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Usu√°rios encontrados:', response.data.length);
    console.log('üë• Dados:', JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rios:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar iniciar conversa
async function testarIniciarConversa(token, destinatarioId) {
  try {
    console.log('üîç Testando: Iniciar conversa');
    const response = await axios.post(`${API_BASE}/mensagens/conversa`, {
      destinatarioId
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Conversa iniciada:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao iniciar conversa:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar enviar mensagem
async function testarEnviarMensagem(token, destinatarioId, texto) {
  try {
    console.log('üîç Testando: Enviar mensagem');
    const response = await axios.post(`${API_BASE}/mensagens/enviar`, {
      destinatarioId,
      texto
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Mensagem enviada:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para testar obter mensagens de uma conversa
async function testarObterMensagens(token, conversaId) {
  try {
    console.log('üîç Testando: Obter mensagens da conversa', conversaId);
    const response = await axios.get(`${API_BASE}/mensagens/conversa/${conversaId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Mensagens encontradas:', response.data.length);
    console.log('üí¨ Dados:', JSON.stringify(response.data, null, 2));
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao obter mensagens:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o principal para executar todos os testes
async function executarTestes() {
  console.log('üöÄ Iniciando testes da API de mensagens...\n');

  // Dados de teste (ajuste conforme necess√°rio)
  const email = 'teste@empresa.com';
  const senha = '123456';

  // 1. Fazer login
  console.log('1Ô∏è‚É£ Fazendo login...');
  const token = await login(email, senha);
  if (!token) {
    console.error('‚ùå Falha no login. Abortando testes.');
    return;
  }
  console.log('‚úÖ Login realizado com sucesso\n');

  // 2. Listar conversas existentes
  console.log('2Ô∏è‚É£ Testando listagem de conversas...');
  const conversas = await testarListarConversas(token);
  console.log('');

  // 3. Buscar usu√°rios
  console.log('3Ô∏è‚É£ Testando busca de usu√°rios...');
  const usuarios = await testarBuscarUsuarios(token, 'teste');
  console.log('');

  if (usuarios && usuarios.length > 0) {
    const primeiroUsuario = usuarios[0];

    // 4. Iniciar conversa
    console.log('4Ô∏è‚É£ Testando in√≠cio de conversa...');
    const conversa = await testarIniciarConversa(token, primeiroUsuario.id);
    console.log('');

    if (conversa) {
      // 5. Enviar mensagem
      console.log('5Ô∏è‚É£ Testando envio de mensagem...');
      const mensagem = await testarEnviarMensagem(token, primeiroUsuario.id, 'Ol√°! Esta √© uma mensagem de teste.');
      console.log('');

      // 6. Obter mensagens da conversa
      console.log('6Ô∏è‚É£ Testando obten√ß√£o de mensagens...');
      await testarObterMensagens(token, conversa.conversaId);
      console.log('');
    }
  }

  // 7. Listar conversas novamente para ver se a nova conversa aparece
  console.log('7Ô∏è‚É£ Verificando conversas ap√≥s cria√ß√£o...');
  await testarListarConversas(token);
  console.log('');

  console.log('üéâ Testes conclu√≠dos!');
}

// Executar os testes
executarTestes().catch(console.error); 